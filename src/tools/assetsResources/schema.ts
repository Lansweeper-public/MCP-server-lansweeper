import { z } from "zod";

// TypeScript interfaces for asset resource response
export interface AssetResourcePagination {
  limit: number;
  current: string | null;
  next: string | null;
  page: string;
}

export interface AssetResourcesResponse {
  items: Record<string, unknown>[]; // The actual asset data structure varies based on requested fields
  pagination: AssetResourcePagination;
  total: number;
}

export interface SiteAssetResourcesResponse {
  site: {
    assetResources: AssetResourcesResponse;
  };
}

// AssetsFilterType enum - all available filter operators
const AssetsFilterTypeEnum = z.enum([
  "EQUAL",
  "NOT_EQUAL",
  "SMALLER_THAN",
  "SMALLER_THAN_OR_EQUAL",
  "GREATER_THAN",
  "GREATER_THAN_OR_EQUAL",
  "IN",
  "NOT_IN",
  "LIKE",
  "NOT_LIKE",
  "IS_NULL",
  "IS_NOT_NULL",
  "STARTS_WITH",
  "NOT_STARTS_WITH",
  "ENDS_WITH",
  "NOT_ENDS_WITH",
  "CONTAINS",
  "NOT_CONTAINS",
]);

// AssetsFilterConjunction enum - logical operators
const AssetsFilterConjunctionEnum = z.enum(["AND", "OR"]);

const reservedFilterPaths = [
  "key",
  "installKey",
  "installationId",
  "assetBasicInfo.cloudCategory",
  "assetBasicInfo.cloudEnvId",
  "assetBasicInfo.cloudEnvName",
  "assetBasicInfo.cloudOrgId",
  "assetBasicInfo.cloudOrgName",
  "assetBasicInfo.cloudProvider",
  "assetBasicInfo.cloudRegion",
  "assetBasicInfo.cloudTags",
  "assetBasicInfo.description",
  "assetBasicInfo.domain",
  "assetBasicInfo.firstSeen",
  "assetBasicInfo.fqdn",
  "assetBasicInfo.ipAddress",
  "assetBasicInfo.lastSeen",
  "assetBasicInfo.lastTried",
  "assetBasicInfo.lastUpdated",
  "assetBasicInfo.mac",
  "assetBasicInfo.name",
  "assetBasicInfo.origin",
  "assetBasicInfo.scannerTypes",
  "assetBasicInfo.subType",
  "assetBasicInfo.type",
  "assetBasicInfo.typeGroup",
  "assetBasicInfo.userName",
  "assetCustom.comment",
  "assetCustom.department",
  "assetCustom.dnsName",
  "assetCustom.fields.fieldKey",
  "assetCustom.fields.name",
  "assetCustom.fields.value",
  "assetCustom.location",
  "assetCustom.manufacturer",
  "assetCustom.model",
  "assetCustom.purchaseDate",
  "assetCustom.serialNumber",
  "assetCustom.stateName",
  "assetCustom.warrantyDate",
  "assetGroups.assetGroupKey",
  "assetGroups.name",
  "operatingSystem.buildNumber",
  "operatingSystem.caption",
  "operatingSystem.version",
  "otData.moduleType",
  "reconciliations.sourceId",
  "relations.childAssetKey",
  "relations.name",
  "relations.parentAssetKey",
] as const;

const FilterPathsSchema = z.enum(reservedFilterPaths);

// AssetsFiltersCondition - individual filter condition
const AssetsFiltersConditionSchema = z.object({
  operator: AssetsFilterTypeEnum.describe("The filter operator to apply"),
  path: FilterPathsSchema.describe(`The field path to filter on. Available paths: ${reservedFilterPaths.join(", ")}`),
  value: z.string().describe("The value to filter by"),
});

// Type definition for recursive filter structure
type AssetsFilterGroupedInputType = {
  conditions?: Array<z.infer<typeof AssetsFiltersConditionSchema>>;
  conjunction?: z.infer<typeof AssetsFilterConjunctionEnum>;
  groups?: Array<AssetsFilterGroupedInputType>;
};

// AssetsFilterGroupedInput - recursive filter structure
const AssetsFilterGroupedInputSchema: z.ZodType<AssetsFilterGroupedInputType> = z.lazy(() =>
  z.object({
    conditions: z.array(AssetsFiltersConditionSchema).optional().describe("Array of filter conditions to apply"),
    conjunction: AssetsFilterConjunctionEnum.optional().describe(
      "Logical operator to combine conditions and groups (default: AND)",
    ),
    groups: z.array(AssetsFilterGroupedInputSchema).optional().describe("Nested filter groups for complex filtering"),
  }),
);

// Available asset field paths for querying
const availableAssetFields = [
  "key",
  "installKey",
  "installationId",
  "tenantId",
  "url",
  "processes.caption",
  "processes.commandLine",
  "processes.executablePath",
  "processes.priority",
  "processes.threadCount",
  "assetBasicInfo.upTime",
  "assetBasicInfo.domain",
  "assetBasicInfo.name",
  "assetBasicInfo.userDomain",
  "assetBasicInfo.userName",
  "assetBasicInfo.assetUnique",
  "assetBasicInfo.description",
  "assetBasicInfo.firstSeen",
  "assetBasicInfo.fqdn",
  "assetBasicInfo.ipAddress",
  "assetBasicInfo.lastSeen",
  "assetBasicInfo.lastTried",
  "assetBasicInfo.lastUpdated",
  "assetBasicInfo.mac",
  "assetBasicInfo.origin",
  "assetBasicInfo.scannerTypes",
  "assetBasicInfo.subType",
  "assetBasicInfo.type",
  "assetBasicInfo.typeGroup",
  "assetBasicInfo.cloudCategory",
  "assetBasicInfo.cloudEnvId",
  "assetBasicInfo.cloudEnvName",
  "assetBasicInfo.cloudOrgId",
  "assetBasicInfo.cloudOrgName",
  "assetBasicInfo.cloudProvider",
  "assetBasicInfo.cloudRegion",
  "assetBasicInfo.cloudTags",
  "assetBasicInfo.time",
  "assetBasicInfo.lastFullBackup",
  "assetBasicInfo.lastFullImage",
  "assetBasicInfo.time",
  "assetBasicInfo.lastPatched",
  "computerSystems.manufacturer",
  "computerSystems.productName",
  "computerSystems.sku",
  "computerSystems.serial",
  "operatingSystem.caption",
  "operatingSystem.version",
  "operatingSystem.hostName",
  "operatingSystem.bootStatus",
  "operatingSystem.buildType",
  "operatingSystem.countryCode",
  "operatingSystem.installDate",
  "operatingSystem.organization",
  "operatingSystem.osProductSuite",
  "operatingSystem.otherTypeDescription",
  "operatingSystem.productType",
  "operatingSystem.registeredUser",
  "operatingSystem.serialNumber",
  "operatingSystem.servicePackMajorVersion",
  "operatingSystem.servicePackMinorVersion",
  "operatingSystem.suiteMask",
  "operatingSystem.buildNumber",
  "operatingSystem.windowsDirectory",
  "operatingSystem.currentTimezone",
  "operatingSystem.dataExecutionPrevention32BitApplications",
  "operatingSystem.dataExecutionPreventionAvailable",
  "operatingSystem.dataExecutionPreventionDrivers",
  "operatingSystem.dataExecutionPreventionSupportPolicy",
  "operatingSystem.encryptionLevel",
  "operatingSystem.maxProcessMemorySize",
  "operatingSystem.numberOfLicensedUsers",
  "operatingSystem.sizeStoredInPagingFiles",
  "operatingSystem.systemDevice",
  "operatingSystem.systemDrive",
  "operatingSystem.totalVirtualMemorySize",
  "operatingSystem.totalVisibleMemorySize",
  "operatingSystem.language",
  "operatingSystem.secureVirtualMemory",
  "operatingSystem.x86x64Kernel",
  "operatingSystem.annotatedAssetId",
  "operatingSystem.annotatedLocation",
  "operatingSystem.annotatedUser",
  "operatingSystem.deviceId",
  "operatingSystem.lastEnrollmentTime",
  "operatingSystem.meid",
  "operatingSystem.name",
  "operatingSystem.notes",
  "operatingSystem.orgUnitPath",
  "operatingSystem.status",
  "operatingSystem.supportEndDate",
  "operatingSystem.willAutoRenew",
  "operatingSystem.activeTimeRanges.activeTime",
  "operatingSystem.activeTimeRanges.date",
  "operatingSystem.osDiskSizeInMb",
  "operatingSystem.codeset",
  "operatingSystem.debug",
  "operatingSystem.foregroundApplicationBoost",
  "volumes.attachTime",
  "volumes.attachmentState",
  "volumes.automount",
  "volumes.size",
  "volumes.snapshotId",
  "volumes.state",
  "volumes.fileSystem",
  "volumes.label",
  "volumes.name",
  "volumes.type",
  "volumes.volumeId",
  "volumes.volumeType",
  "volumes.lastChanged",
  "volumes.mountPoint",
  "volumes.blockSize",
  "volumes.compressed",
  "volumes.creationDate",
  "volumes.deleteOnTermination",
  "volumes.device",
  "volumes.driveLetter",
  "volumes.driveType",
  "volumes.errorMethodology",
  "volumes.freeSpace",
  "volumes.indexingEnabled",
  "volumes.iops",
  "volumes.encrypted",
  "volumes.pageFilePresent",
  "volumes.supportsDiskQuotas",
  "volumes.supportsFileBasedCompression",
  "volumes.protectionStatus",
  "mappedDrives.autoMounted",
  "mappedDrives.type",
  "mappedDrives.name",
  "mappedDrives.lastChanged",
  "mappedDrives.remotePath",
  "mappedDrives.mountedFrom",
  "mappedDrives.userName",
  "mappedDrives.driveLetter",
  "memoryModules.size",
  "memoryModules.dataWidth",
  "memoryModules.locator",
  "memoryModules.formFactor",
  "memoryModules.lastChanged",
  "memoryModules.manufacturer",
  "memoryModules.type",
  "memoryModules.serialNumber",
  "memoryModules.speed",
  "memoryModules.totalWidth",
  "memoryModules.typeDetail",
  "memoryModules.name",
  "memoryModules.status",
  "memoryModules.configuredClockSpeed",
  "memoryModules.voltage",
  "memoryModules.interleaveDatadepth",
  "memoryModules.interleavePosition",
  "memoryModules.partNumber",
  "memoryModules.positionInRow",
  "memoryModules.sku",
  "memoryModules.set",
  "memoryArrays.currentInterleave",
  "memoryArrays.maxMemoryModuleSize",
  "memoryArrays.lastChanged",
  "memoryArrays.totalSize",
  "memoryArrays.numberOfSlots",
  "memoryArrays.supportedInterleave",
  "memoryArrays.supportedTypes",
  "memoryArrays.supportedSpeeds",
  "memoryArrays.location",
  "memoryArrays.correctionError",
  "memoryArrays.use",
  "memoryArrays.tag",
  "cdromDrives.capability",
  "cdromDrives.caption",
  "cdromDrives.drive",
  "cdromDrives.lastChanged",
  "cdromDrives.manufacturer",
  "cdromDrives.firmware",
  "cdromDrives.interConnect",
  "cdromDrives.burnSupport",
  "cdromDrives.burnUnderrunProtection",
  "cdromDrives.cache",
  "cdromDrives.cdWrite",
  "cdromDrives.dvdWrite",
  "cdromDrives.media",
  "cdromDrives.readDvd",
  "cdromDrives.writeStrategies",
  "cdromDrives.mount",
  "cdromDrives.path",
  "buses.deviceId",
  "buses.number",
  "buses.type",
  "buses.lastChanged",
  "services.caption",
  "services.pathName",
  "services.startName",
  "services.startMode",
  "services.state",
  "services.lastChanged",
  "users.accountType",
  "users.disabled",
  "users.fullName",
  "users.lockout",
  "users.name",
  "users.passwordChangeable",
  "users.passwordExpires",
  "users.passwordRequired",
  "users.status",
  "users.lastChanged",
  "users.buildInAdmin",
  "users.email",
  "users.type",
  "userInGroups.groupName",
  "userInGroups.domainName",
  "userInGroups.userName",
  "userInGroups.adminGroup",
  "userInGroups.lastChanged",
  "portConnectors.caption",
  "portConnectors.lastChanged",
  "portConnectors.maxSpeed",
  "portConnectors.connectorType",
  "portConnectors.internalReferenceDesignator",
  "portConnectors.type",
  "portConnectors.availability",
  "portConnectors.configManagerErrorCode",
  "portConnectors.configManagerUserConfig",
  "portConnectors.osAutoDiscovered",
  "portConnectors.powerManagementSupported",
  "portConnectors.protocolSupported",
  "portConnectors.deviceId",
  "portConnectors.maxBaudRate",
  "portConnectors.maximumInputBufferSize",
  "portConnectors.maximumOutputBufferSize",
  "portConnectors.providerType",
  "portConnectors.portConnectorType",
  "portConnectors.externalReferenceDesignator",
  "portConnectors.isBinary",
  "processors.type",
  "processors.maxClockSpeed",
  "processors.l2CacheSize",
  "processors.numberOfCores",
  "processors.lastChanged",
  "processors.family",
  "processors.manufacturer",
  "processors.externalClock",
  "processors.status",
  "processors.serialNumber",
  "processors.socket",
  "processors.name",
  "processors.addressWidth",
  "processors.architecture",
  "processors.caption",
  "processors.l2CacheSpeed",
  "processors.numberOfLogicalProcessors",
  "processors.availability",
  "processors.dataWidth",
  "processors.deviceId",
  "processors.id",
  "processors.level",
  "processors.revision",
  "processors.upgradeMethod",
  "processors.version",
  "processors.voltageCaps",
  "processors.addressSizes",
  "processors.bogoMips",
  "processors.byteOrder",
  "processors.currentClockSpeed",
  "processors.currentSpeed",
  "processors.l1dCacheSize",
  "processors.l1iCacheSize",
  "processors.l3CacheSize",
  "processors.minimumClockSpeed",
  "processors.model",
  "processors.modelType",
  "processors.opModes",
  "processors.processorId",
  "processors.stepping",
  "processors.threadsPerCore",
  "processors.virtualization",
  "processors.voltage",
  "printers.capabilityDescriptions",
  "printers.caption",
  "printers.enableBidi",
  "printers.horizontalResolution",
  "printers.local",
  "printers.location",
  "printers.network",
  "printers.portName",
  "printers.shareName",
  "printers.status",
  "printers.verticalResolution",
  "printers.lastChanged",
  "assetCustom.model",
  "assetCustom.modelNumber",
  "assetCustom.firmwareVersion",
  "assetCustom.orderNumber",
  "assetCustom.purchaseDate",
  "assetCustom.warrantyDate",
  "assetCustom.lastPatched",
  "assetCustom.lastFullBackup",
  "assetCustom.lastFullImage",
  "assetCustom.comment",
  "assetCustom.location",
  "assetCustom.building",
  "assetCustom.department",
  "assetCustom.branchOffice",
  "assetCustom.barCode",
  "assetCustom.contact",
  "assetCustom.manufacturer",
  "assetCustom.httpTitle",
  "assetCustom.httpServer",
  "assetCustom.httpsServer",
  "assetCustom.ftpHeader",
  "assetCustom.serialNumber",
  "assetCustom.dnsName",
  "assetCustom.sshServer",
  "assetCustom.sku",
  "assetCustom.stateKey",
  "assetCustom.hardwareVersion",
  "assetCustom.softwareVersion",
  "assetCustom.deviceVersion",
  "assetCustom.stateName",
  "assetCustom.fields.value",
  "assetCustom.fields.fieldKey",
  "assetCustom.fields.name",
  "assetCustom.lastChanged",
  "siteId",
  "sourceExternalId",
  "softwares.installDate",
  "softwares.lastChanged",
  "softwares.currentUser",
  "softwares.msi",
  "softwares.name",
  "softwares.publisher",
  "softwares.release",
  "softwares.operatingSystem",
  "softwares.version",
  "softwares.architecture",
  "softwares.status",
  "softwares.type",
  "softwares.error",
  "softwares.cpe",
  "softwares.unspsc",
  "softwares.category",
  "softwares.edition",
  "softwares.installType",
  "softwares.language",
  "softwares.marketVersion",
  "softwares.shortVersion",
  "assetGroups.assetGroupKey",
  "assetGroups.name",
  "assetGroups.dynamic",
  "reconciliations.sourceId",
  "reconciliations.sourceType",
  "reconciliations.sourceName",
  "reconciliations.lastUpdate",
  "reconciliations.rule",
  "reconciliations.confidence",
  "reconciliations.fields.key",
  "reconciliations.fields.value",
] as const;

const AvailableAssetFieldsSchema = z.enum(availableAssetFields);

// Export types for TypeScript usage
export type AssetsFilterType = z.infer<typeof AssetsFilterTypeEnum>;
export type AssetsFilterConjunction = z.infer<typeof AssetsFilterConjunctionEnum>;
export type AssetsFiltersCondition = z.infer<typeof AssetsFiltersConditionSchema>;
export type AssetsFilterGroupedInput = AssetsFilterGroupedInputType;
export type AvailableAssetFields = z.infer<typeof AvailableAssetFieldsSchema>;

// Define the schema for the tool parameters
export const getAssetsResourcesSchema = {
  siteId: z
    .string()
    .uuid()
    .describe(
      "UUID of the site containing the assets. Use the 'get-authorized-sites' tool to discover available site identifiers and their corresponding UUIDs.",
    ),
  limit: z.number().max(500).optional().describe("Maximum number of assets to return (default: 10)"),
  filters: AssetsFilterGroupedInputSchema.optional().describe(
    "Structured filter object with conditions, conjunctions, and nested groups",
  ),
  fields: z
    .array(AvailableAssetFieldsSchema)
    .max(30)
    .optional()
    .describe(
      `Optional list of specific field paths to request. If not provided, default fields will be used. Maximum 30 fields allowed. Available fields: ${availableAssetFields.join(", ")}`,
    ),
  cursor: z.string().optional().describe("Cursor for pagination"),
};

// Export input type
export type GetAssetsResourcesInput = z.infer<
  z.ZodSchema<{
    siteId: string;
    limit?: number;
    filters?: AssetsFilterGroupedInput;
    fields?: AvailableAssetFields[];
    cursor?: string;
  }>
>;
